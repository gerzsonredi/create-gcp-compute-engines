#!/usr/bin/env python3
"""
Fixed URL Sequential Test Script for Mannequin Segmenter API
Sends the same image URL repeatedly to test consistency and eliminate image-specific variance
"""

import asyncio
import aiohttp
import time
import statistics
from datetime import datetime
import json

# ========== KONFIGUR√ÅCI√ìS PARAM√âTEREK ==========
TARGET_INSTANCE = "http://34.140.252.94:5001"  # Tesztelend≈ë VM instance
TOTAL_REQUESTS = 50                             # √ñsszes k√©r√©sek sz√°ma
REQUEST_TIMEOUT = 120                           # Timeout m√°sodpercben
DELAY_BETWEEN_REQUESTS = 0.5                    # Kis sz√ºnet k√©r√©sek k√∂z√∂tt (m√°sodperc)

# FIXED URL - mindig ugyanaz a k√©p
FIXED_IMAGE_URL = "https://storage.googleapis.com/public-images-redi/131727003.jpg"

# API endpoint
API_ENDPOINT = "/infer"

# ===============================================

class FixedUrlTester:
    def __init__(self, target_instance, image_url):
        self.target_instance = target_instance
        self.image_url = image_url
        self.results = []
        self.errors = []
        
        print(f"üéØ Fixed URL teszt: {TOTAL_REQUESTS} k√©r√©s ugyanazzal a k√©ppel")
        print(f"üñºÔ∏è  Teszt k√©p: {image_url}")
    
    async def make_single_request(self, session, request_id):
        """Egyetlen API k√©r√©s v√©grehajt√°sa"""
        full_url = f"{self.target_instance}{API_ENDPOINT}"
        request_start = time.time()
        
        print(f"üîÑ Request {request_id:2d}/50: Fixed URL teszt", end="", flush=True)
        
        try:
            payload = {
                "image_url": self.image_url,
                "prompt_mode": "both"
            }
            
            async with session.post(
                full_url,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as response:
                response_text = await response.text()
                request_end = time.time()
                response_time = request_end - request_start
                
                result = {
                    "request_id": request_id,
                    "image_url": self.image_url,
                    "status_code": response.status,
                    "response_time": response_time,
                    "timestamp": datetime.fromtimestamp(request_start),
                    "success": response.status == 200,
                    "response_size": len(response_text)
                }
                
                if response.status == 200:
                    try:
                        json_response = json.loads(response_text)
                        result["has_visualization_url"] = "visualization_url" in json_response
                        if "timing" in json_response:
                            result["server_timing"] = json_response["timing"]
                            # Server-side timing r√©szletez√©se
                            timing = json_response["timing"]
                            if "model_inference" in timing and "gcs_total" in timing:
                                result["server_model_inference"] = timing["model_inference"]
                                result["server_gcs_total"] = timing["gcs_total"]
                                result["server_total_request"] = timing.get("total_request", 0)
                                result["server_image_conversion"] = timing.get("image_conversion", 0)
                                result["server_gcs_upload"] = timing.get("gcs_upload", 0)
                    except json.JSONDecodeError:
                        result["has_visualization_url"] = False
                
                self.results.append(result)
                
                # R√©szletes kimenet
                status_icon = "‚úÖ" if response.status == 200 else "‚ùå"
                server_info = ""
                if "server_timing" in result:
                    model_time = result.get("server_model_inference", 0)
                    gcs_time = result.get("server_gcs_total", 0)
                    server_info = f" (model: {model_time:.2f}s, gcs: {gcs_time:.2f}s)"
                
                print(f" {status_icon} {response.status} ({response_time:.3f}s{server_info})")
                
        except asyncio.TimeoutError:
            request_end = time.time()
            response_time = request_end - request_start
            error = {
                "request_id": request_id,
                "image_url": self.image_url,
                "error": "Timeout",
                "response_time": response_time,
                "timestamp": datetime.fromtimestamp(request_start)
            }
            self.errors.append(error)
            print(f" ‚è∞ TIMEOUT ({response_time:.3f}s)")
            
        except Exception as e:
            request_end = time.time()
            response_time = request_end - request_start
            error = {
                "request_id": request_id,
                "image_url": self.image_url,
                "error": str(e),
                "response_time": response_time,
                "timestamp": datetime.fromtimestamp(request_start)
            }
            self.errors.append(error)
            print(f" ‚ùå ERROR: {e}")
    
    async def run_sequential_test(self):
        """Szekvenci√°lis teszt futtat√°sa"""
        print(f"\nüöÄ Fixed URL Sequential Test")
        print(f"üìä Konfigur√°ci√≥:")
        print(f"   - Target instance: {self.target_instance}")
        print(f"   - K√©r√©sek sz√°ma: {TOTAL_REQUESTS}")
        print(f"   - Request timeout: {REQUEST_TIMEOUT}s")
        print(f"   - K√©r√©sek k√∂z√∂tti sz√ºnet: {DELAY_BETWEEN_REQUESTS}s")
        print(f"   - M√≥d: SZEKVENCI√ÅLIS (egy k√©r√©s egyszerre)")
        print(f"   - K√©p: MINDIG UGYANAZ (consistency teszt)")
        print()
        
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            for i in range(1, TOTAL_REQUESTS + 1):
                await self.make_single_request(session, i)
                
                # Kis sz√ºnet a k√∂vetkez≈ë k√©r√©s el≈ëtt (kiv√©ve az utols√≥ ut√°n)
                if i < TOTAL_REQUESTS:
                    await asyncio.sleep(DELAY_BETWEEN_REQUESTS)
                
                # Progress minden 10. k√©r√©sn√©l
                if i % 10 == 0 or i == TOTAL_REQUESTS:
                    elapsed = time.time() - start_time
                    successful = len([r for r in self.results if r["success"]])
                    print(f"üìä Progress: {i}/{TOTAL_REQUESTS} k√©r√©s, {successful} sikeres ({elapsed:.1f}s)")
        
        end_time = time.time()
        total_time = end_time - start_time
        
        print(f"\n‚è±Ô∏è  Teszt befejezve! (√∂sszes id≈ë: {total_time:.2f}s)")
        self.print_detailed_statistics()
    
    def print_detailed_statistics(self):
        """R√©szletes statisztik√°k ki√≠r√°sa"""
        successful_requests = [r for r in self.results if r["success"]]
        failed_requests = len(self.results) - len(successful_requests)
        total_requests = len(self.results) + len(self.errors)
        
        print(f"\nüìà FIXED URL TESZT EREDM√âNYEK - CONSISTENCY ELEMZ√âS")
        print(f"=" * 80)
        print(f"üéØ Target Instance: {self.target_instance}")
        print(f"üñºÔ∏è  Fixed Image URL: {self.image_url}")
        print(f"üìä √ñsszes k√©r√©s: {total_requests}")
        print(f"‚úÖ Sikeres k√©r√©sek: {len(successful_requests)}")
        print(f"‚ùå Sikertelen k√©r√©sek: {failed_requests + len(self.errors)}")
        if total_requests > 0:
            print(f"üìà Sikeress√©g ar√°ny: {len(successful_requests)/total_requests*100:.1f}%")
        
        if successful_requests:
            response_times = [r["response_time"] for r in successful_requests]
            
            print(f"\n‚è∞ V√ÅLASZID≈ê STATISZTIK√ÅK (ugyanaz a k√©p {len(successful_requests)}x)")
            print(f"   üîπ Minimum: {min(response_times):.3f} m√°sodperc")
            print(f"   üîπ Maximum: {max(response_times):.3f} m√°sodperc")
            print(f"   üîπ √Åtlag: {statistics.mean(response_times):.3f} m√°sodperc")
            print(f"   üîπ Medi√°n: {statistics.median(response_times):.3f} m√°sodperc")
            if len(response_times) > 1:
                print(f"   üîπ Sz√≥r√°s: {statistics.stdev(response_times):.3f} m√°sodperc")
                variability = (statistics.stdev(response_times) / statistics.mean(response_times)) * 100
                print(f"   üîπ Variabilit√°s: {variability:.1f}% (CV)")
            
            # Server-side timing statisztik√°k ha el√©rhet≈ëk
            model_times = [r.get("server_model_inference", 0) for r in successful_requests if "server_model_inference" in r]
            gcs_times = [r.get("server_gcs_total", 0) for r in successful_requests if "server_gcs_total" in r]
            image_conv_times = [r.get("server_image_conversion", 0) for r in successful_requests if "server_image_conversion" in r]
            gcs_upload_times = [r.get("server_gcs_upload", 0) for r in successful_requests if "server_gcs_upload" in r]
            
            if model_times:
                print(f"\nü§ñ SERVER-SIDE MODEL INFERENCE STATISZTIK√ÅK")
                print(f"   üîπ Minimum: {min(model_times):.3f} m√°sodperc")
                print(f"   üîπ Maximum: {max(model_times):.3f} m√°sodperc")
                print(f"   üîπ √Åtlag: {statistics.mean(model_times):.3f} m√°sodperc")
                print(f"   üîπ Medi√°n: {statistics.median(model_times):.3f} m√°sodperc")
                if len(model_times) > 1:
                    model_var = (statistics.stdev(model_times) / statistics.mean(model_times)) * 100
                    print(f"   üîπ Variabilit√°s: {model_var:.1f}% (CV)")
            
            if gcs_times:
                print(f"\n‚òÅÔ∏è  SERVER-SIDE GCS STATISZTIK√ÅK")
                print(f"   üîπ Minimum: {min(gcs_times):.3f} m√°sodperc")
                print(f"   üîπ Maximum: {max(gcs_times):.3f} m√°sodperc")
                print(f"   üîπ √Åtlag: {statistics.mean(gcs_times):.3f} m√°sodperc")
                print(f"   üîπ Medi√°n: {statistics.median(gcs_times):.3f} m√°sodperc")
            
            if image_conv_times:
                print(f"\nüñºÔ∏è  IMAGE CONVERSION STATISZTIK√ÅK")
                print(f"   üîπ Minimum: {min(image_conv_times):.3f} m√°sodperc")
                print(f"   üîπ Maximum: {max(image_conv_times):.3f} m√°sodperc")
                print(f"   üîπ √Åtlag: {statistics.mean(image_conv_times):.3f} m√°sodperc")
                
            if gcs_upload_times:
                print(f"\nüì§ GCS UPLOAD STATISZTIK√ÅK")
                print(f"   üîπ Minimum: {min(gcs_upload_times):.3f} m√°sodperc")
                print(f"   üîπ Maximum: {max(gcs_upload_times):.3f} m√°sodperc")
                print(f"   üîπ √Åtlag: {statistics.mean(gcs_upload_times):.3f} m√°sodperc")
            
            # Consistency elemz√©s - bemeleged√©si hat√°s
            if len(response_times) >= 10:
                print(f"\nüî• BEMELEGED√âSI HAT√ÅS ELEMZ√âS")
                first_5 = response_times[:5]
                first_10 = response_times[:10]
                last_10 = response_times[-10:]
                middle_section = response_times[10:-10] if len(response_times) > 20 else response_times[5:-5]
                
                print(f"   üîπ Els≈ë 5 k√©r√©s √°tlag: {statistics.mean(first_5):.3f}s")
                print(f"   üîπ Els≈ë 10 k√©r√©s √°tlag: {statistics.mean(first_10):.3f}s")
                if middle_section:
                    print(f"   üîπ K√∂z√©ps≈ë r√©sz √°tlag: {statistics.mean(middle_section):.3f}s")
                print(f"   üîπ Utols√≥ 10 k√©r√©s √°tlag: {statistics.mean(last_10):.3f}s")
                
                # Trend ki√©rt√©kel√©s
                first_avg = statistics.mean(first_5)
                stable_avg = statistics.mean(last_10)
                
                if stable_avg < first_avg * 0.8:
                    improvement = ((first_avg - stable_avg) / first_avg) * 100
                    print(f"   ‚úÖ Jelent≈ës bemeleged√©si hat√°s: -{improvement:.1f}% javul√°s")
                elif abs(stable_avg - first_avg) / first_avg < 0.1:
                    print(f"   üìä Stabil teljes√≠tm√©ny kezdett≈ël")
                else:
                    print(f"   ‚ö†Ô∏è  V√°ltoz√≥ teljes√≠tm√©ny")
            
            # Outlier elemz√©s
            print(f"\nüîç OUTLIER ELEMZ√âS (ugyanaz a k√©p!)")
            avg_time = statistics.mean(response_times)
            std_time = statistics.stdev(response_times) if len(response_times) > 1 else 0
            threshold = avg_time + 2 * std_time
            
            outliers = [(i+1, r) for i, r in enumerate(successful_requests) if r["response_time"] > threshold]
            
            if outliers:
                print(f"   ‚ö†Ô∏è  {len(outliers)} outlier tal√°lva (>{threshold:.3f}s) UGYANAZZAL a k√©ppel:")
                for req_num, outlier in outliers:
                    model_time = outlier.get("server_model_inference", 0)
                    print(f"      Request {req_num:2d}: {outlier['response_time']:6.3f}s (model: {model_time:.3f}s)")
                print(f"   üí° Ez azt jelenti, hogy NEM a k√©p komplexit√°sa okozza a lassul√°st!")
            else:
                print(f"   ‚úÖ Nincs outlier - konzisztens teljes√≠tm√©ny")
                print(f"   üí° A fixed URL teszt bizony√≠tja, hogy a service stabil")
        
        # Hib√°k r√©szletez√©se
        if self.errors:
            print(f"\n‚ùå HIB√ÅK R√âSZLETEZ√âSE")
            error_types = {}
            for error in self.errors:
                error_type = error["error"]
                if error_type not in error_types:
                    error_types[error_type] = 0
                error_types[error_type] += 1
            
            for error_type, count in error_types.items():
                print(f"   üîπ {error_type}: {count} alkalom")
        
        # Minden k√©r√©s r√©szletesen (kompakt form√°tum)
        print(f"\nüìã √ñSSZES K√âR√âS ID≈êZ√çT√âSE (Fixed URL)")
        print(f"{'#':<3} {'Id≈ëb√©lyeg':<12} {'V√°laszid≈ë':<10} {'Model':<8} {'GCS':<6} {'St√°tusz'}")
        print(f"{'-'*3} {'-'*12} {'-'*10} {'-'*8} {'-'*6} {'-'*7}")
        
        for i, result in enumerate(self.results, 1):
            timestamp_str = result["timestamp"].strftime("%H:%M:%S")
            model_time = result.get("server_model_inference", 0)
            gcs_time = result.get("server_gcs_total", 0)
            status = "‚úÖ 200" if result["success"] else f"‚ùå {result['status_code']}"
            
            print(f"{i:<3} {timestamp_str:<12} {result['response_time']:8.3f}s {model_time:6.3f}s {gcs_time:4.3f}s {status}")
        
        # Hib√°s k√©r√©sek
        for i, error in enumerate(self.errors, len(self.results) + 1):
            timestamp_str = error["timestamp"].strftime("%H:%M:%S")
            print(f"{i:<3} {timestamp_str:<12} {error['response_time']:8.3f}s {'N/A':>6} {'N/A':>4} ‚ùå ERR")

async def main():
    """F≈ë program bel√©p√©si pont"""
    print("üîß Fixed URL Sequential Performance Test")
    print("=" * 60)
    print("üéØ Ez a teszt ugyanazt a k√©pet k√ºldi el t√∂bbsz√∂r")
    print("üí° C√©lja: k√©p-specifikus variabilit√°s kiz√°r√°sa")
    print()
    
    # Teszter l√©trehoz√°sa √©s futtat√°sa
    tester = FixedUrlTester(TARGET_INSTANCE, FIXED_IMAGE_URL)
    await tester.run_sequential_test()

if __name__ == "__main__":
    asyncio.run(main())
