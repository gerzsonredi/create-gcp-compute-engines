#!/usr/bin/env python3
"""
Single Instance Performance Test for Mannequin Segmenter API
Tests one specific VM instance with sequential requests to analyze performance consistency
"""

import asyncio
import aiohttp
import time
import statistics
from datetime import datetime
import json

# ========== KONFIGUR√ÅCI√ìS PARAM√âTEREK ==========
TARGET_INSTANCE = "http://35.233.66.133:5001"  # Tesztelend≈ë VM instance
NUMBER_OF_REQUESTS = 1000                        # K√©r√©sek sz√°ma
REQUEST_TIMEOUT = 60                           # Timeout m√°sodpercben
DELAY_BETWEEN_REQUESTS = 0.5                   # K√©sleltet√©s k√©r√©sek k√∂z√∂tt m√°sodpercben

# API endpoint √©s payload
API_ENDPOINT = "/infer"
TEST_PAYLOAD = {
    "image_url": "https://media.remix.eu/files/16-2025/Roklya-C-A-131676053b.jpg",
    "prompt_mode": "both"
}

# ===============================================

class SingleInstanceTest:
    def __init__(self):
        self.results = []
        self.errors = []
        
    async def make_request(self, session, request_id):
        """Egyetlen API k√©r√©s v√©grehajt√°sa"""
        full_url = f"{TARGET_INSTANCE}{API_ENDPOINT}"
        request_start = time.time()
        
        print(f"üîÑ Request {request_id}: K√ºld√©s... ", end="", flush=True)
        
        try:
            async with session.post(
                full_url,
                json=TEST_PAYLOAD,
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as response:
                response_text = await response.text()
                request_end = time.time()
                response_time = request_end - request_start
                
                result = {
                    "request_id": request_id,
                    "status_code": response.status,
                    "response_time": response_time,
                    "timestamp": datetime.fromtimestamp(request_start),
                    "success": response.status == 200,
                    "response_size": len(response_text)
                }
                
                if response.status == 200:
                    try:
                        json_response = json.loads(response_text)
                        result["has_visualization_url"] = "visualization_url" in json_response
                        if "timing" in json_response:
                            result["server_timing"] = json_response["timing"]
                    except json.JSONDecodeError:
                        result["has_visualization_url"] = False
                
                self.results.append(result)
                print(f"‚úÖ {response.status} ({response_time:.3f}s)")
                
        except asyncio.TimeoutError:
            request_end = time.time()
            response_time = request_end - request_start
            error = {
                "request_id": request_id,
                "error": "Timeout",
                "response_time": response_time,
                "timestamp": datetime.fromtimestamp(request_start)
            }
            self.errors.append(error)
            print(f"‚è∞ TIMEOUT ({response_time:.3f}s)")
            
        except Exception as e:
            request_end = time.time()
            response_time = request_end - request_start
            error = {
                "request_id": request_id,
                "error": str(e),
                "response_time": response_time,
                "timestamp": datetime.fromtimestamp(request_start)
            }
            self.errors.append(error)
            print(f"‚ùå ERROR: {e}")
    
    async def run_test(self):
        """F≈ë teszt futtat√°s"""
        print(f"üéØ Single Instance Teljes√≠tm√©ny Teszt")
        print(f"üìä Konfigur√°ci√≥:")
        print(f"   - Target instance: {TARGET_INSTANCE}")
        print(f"   - K√©r√©sek sz√°ma: {NUMBER_OF_REQUESTS}")
        print(f"   - K√©r√©sek k√∂z√∂tti k√©sleltet√©s: {DELAY_BETWEEN_REQUESTS}s")
        print(f"   - Request timeout: {REQUEST_TIMEOUT}s")
        print(f"   - Teszt k√©p: {TEST_PAYLOAD['image_url']}")
        print()
        
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            for i in range(NUMBER_OF_REQUESTS):
                await self.make_request(session, i + 1)
                
                # V√°runk a k√∂vetkez≈ë k√©r√©s el≈ëtt (kiv√©ve az utols√≥ ut√°n)
                if i < NUMBER_OF_REQUESTS - 1:
                    await asyncio.sleep(DELAY_BETWEEN_REQUESTS)
        
        end_time = time.time()
        total_test_time = end_time - start_time
        
        print(f"\n‚è±Ô∏è  Teszt befejezve! (√∂sszes id≈ë: {total_test_time:.2f}s)")
        self.print_statistics()
    
    def print_statistics(self):
        """Statisztik√°k ki√≠r√°sa"""
        successful_requests = [r for r in self.results if r["success"]]
        failed_requests = len(self.results) - len(successful_requests)
        total_requests = len(self.results) + len(self.errors)
        
        print(f"\nüìà TESZT EREDM√âNYEK")
        print(f"=" * 60)
        print(f"üéØ Target Instance: {TARGET_INSTANCE}")
        print(f"üìä √ñsszes k√©r√©s: {total_requests}")
        print(f"‚úÖ Sikeres k√©r√©sek: {len(successful_requests)}")
        print(f"‚ùå Sikertelen k√©r√©sek: {failed_requests + len(self.errors)}")
        print(f"üìà Sikeress√©g ar√°ny: {len(successful_requests)/total_requests*100:.1f}%")
        
        if successful_requests:
            response_times = [r["response_time"] for r in successful_requests]
            
            print(f"\n‚è∞ V√ÅLASZID≈ê STATISZTIK√ÅK")
            print(f"   üîπ Minimum: {min(response_times):.3f} m√°sodperc")
            print(f"   üîπ Maximum: {max(response_times):.3f} m√°sodperc")
            print(f"   üîπ √Åtlag: {statistics.mean(response_times):.3f} m√°sodperc")
            print(f"   üîπ Medi√°n: {statistics.median(response_times):.3f} m√°sodperc")
            if len(response_times) > 1:
                print(f"   üîπ Sz√≥r√°s: {statistics.stdev(response_times):.3f} m√°sodperc")
            
            # R√©szletes k√©r√©s lista
            print(f"\nüìã R√âSZLETES K√âR√âS LISTA")
            print(f"{'ID':<4} {'Id≈ëb√©lyeg':<20} {'V√°laszid≈ë':<12} {'St√°tusz':<8} {'M√©ret':<8}")
            print(f"{'-'*4} {'-'*20} {'-'*12} {'-'*8} {'-'*8}")
            
            for result in successful_requests:
                timestamp_str = result["timestamp"].strftime("%H:%M:%S.%f")[:-3]
                print(f"{result['request_id']:<4} {timestamp_str:<20} {result['response_time']:.3f}s{'':<5} {result['status_code']:<8} {result['response_size']:<8}")
            
            # Teljes√≠tm√©ny trend elemz√©s
            if len(response_times) >= 3:
                print(f"\nüìä TELJES√çTM√âNY TREND ELEMZ√âS")
                first_third = response_times[:len(response_times)//3]
                last_third = response_times[-len(response_times)//3:]
                
                if first_third and last_third:
                    first_avg = statistics.mean(first_third)
                    last_avg = statistics.mean(last_third)
                    
                    print(f"   üîπ Els≈ë harmad √°tlag: {first_avg:.3f}s")
                    print(f"   üîπ Utols√≥ harmad √°tlag: {last_avg:.3f}s")
                    
                    if last_avg > first_avg * 1.1:
                        print(f"   ‚ö†Ô∏è  Teljes√≠tm√©ny roml√°s √©szlelve (+{((last_avg/first_avg-1)*100):.1f}%)")
                    elif last_avg < first_avg * 0.9:
                        print(f"   ‚úÖ Teljes√≠tm√©ny javul√°s √©szlelve (-{((1-last_avg/first_avg)*100):.1f}%)")
                    else:
                        print(f"   üìä Stabil teljes√≠tm√©ny")
            
            # Server-side timing inform√°ci√≥ ha el√©rhet≈ë
            server_timings = [r.get("server_timing") for r in successful_requests if r.get("server_timing")]
            if server_timings:
                print(f"\nüñ•Ô∏è  SERVER-SIDE TIMING STATISZTIK√ÅK")
                
                timing_keys = set()
                for timing in server_timings:
                    timing_keys.update(timing.keys())
                
                for key in sorted(timing_keys):
                    values = [t[key] for t in server_timings if key in t]
                    if values:
                        print(f"   üîπ {key}: min={min(values):.3f}s, max={max(values):.3f}s, avg={statistics.mean(values):.3f}s")
        
        # Hib√°k r√©szletez√©se
        if self.errors:
            print(f"\n‚ùå HIB√ÅK R√âSZLETEZ√âSE")
            for i, error in enumerate(self.errors, 1):
                print(f"   {i}. {error['timestamp'].strftime('%H:%M:%S')} - {error['error']}")

async def main():
    """F≈ë program bel√©p√©si pont"""
    tester = SingleInstanceTest()
    await tester.run_test()

if __name__ == "__main__":
    print("üîß Mannequin Segmenter Single Instance Performance Test")
    print("=" * 60)
    asyncio.run(main())
