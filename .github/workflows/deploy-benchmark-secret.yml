name: Deploy Benchmark VMs with Secret Manager

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: 'Configuration file to use'
        required: false
        default: 'example-configs/small-deployment.conf'
        type: choice
        options:
          - 'example-configs/small-deployment.conf'
          - 'example-configs/large-deployment.conf'
          - 'deployment-config.conf'
      secret_name:
        description: 'Secret Manager secret name for GCP SA key'
        required: false
        default: 'mannequin-gcp-sa-key'
        type: string

jobs:
  deploy:
    name: Deploy to GCP with Secret Manager
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
          
      - name: Verify authentication
        run: |
          gcloud auth list
          gcloud config list project
          
      - name: Make scripts executable
        run: |
          # Make deploy script executable (check both locations)
          if [ -f "create-gcp-compute-engines/deploy-gcp-secret.sh" ]; then
            chmod +x create-gcp-compute-engines/deploy-gcp-secret.sh
          elif [ -f "deploy-gcp-secret.sh" ]; then
            chmod +x deploy-gcp-secret.sh
          fi
          
          # Make startup script executable (check both locations)  
          if [ -f "create-gcp-compute-engines/startup-script-gcs-secret.sh" ]; then
            chmod +x create-gcp-compute-engines/startup-script-gcs-secret.sh
          elif [ -f "startup-script-gcs-secret.sh" ]; then
            chmod +x startup-script-gcs-secret.sh
          fi
          
      - name: Determine config file path
        id: config
        run: |
          CONFIG_INPUT="${{ github.event.inputs.config_file }}"
          
          # Check if config file exists in repo root
          if [ -f "$CONFIG_INPUT" ]; then
            echo "config_path=$CONFIG_INPUT" >> $GITHUB_OUTPUT
          # Check if config file exists in subdirectory
          elif [ -f "create-gcp-compute-engines/$CONFIG_INPUT" ]; then
            echo "config_path=create-gcp-compute-engines/$CONFIG_INPUT" >> $GITHUB_OUTPUT
          else
            echo "❌ Config file not found: $CONFIG_INPUT"
            exit 1
          fi
          
      - name: Deploy VMs with Secret Manager
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          ZONE: ${{ secrets.GCP_ZONE }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          CONFIG_FILE: ${{ steps.config.outputs.config_path }}
          SECRET_NAME: ${{ github.event.inputs.secret_name }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Navigate to correct directory and run deployment
          if [ -f "create-gcp-compute-engines/deploy-gcp-secret.sh" ]; then
            cd create-gcp-compute-engines
            ./deploy-gcp-secret.sh
          elif [ -f "deploy-gcp-secret.sh" ]; then
            ./deploy-gcp-secret.sh
          else
            echo "❌ Deploy script not found"
            exit 1
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:** ${{ steps.config.outputs.config_path }}" >> $GITHUB_STEP_SUMMARY
          echo "**Secret Manager:** ${{ github.event.inputs.secret_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Security:** ✅ GCP Service Account key stored securely in Secret Manager" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Security Benefits:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No sensitive data in VM metadata" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Service Account key encrypted in Secret Manager" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ VM retrieves credentials securely at runtime" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Automatic key rotation support" >> $GITHUB_STEP_SUMMARY
