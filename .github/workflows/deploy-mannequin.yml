name: Build and Deploy mannequin-segmenter to GCE

# Manual dispatch workflow for deployment
on:
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref (branch, tag, or SHA) to build
        required: false
        default: main
      image_tag:
        description: Image tag (defaults to short SHA)
        required: false
        default: ""

permissions:
  contents: read
  id-token: write
  actions: read
  repository-projects: read

env:
  PROJECT_ID: remix-466614
  REGION: europe-west1
  ARTIFACT_REPO: mannequin-repo
  IMAGE_NAME: mannequin
  ZONE: europe-west1-b

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Checkout mannequin-segmenter repo
        uses: actions/checkout@v4
        with:
          repository: gerzsonredi/mannequin-segmenter-new
          path: mannequin-segmenter
          ref: main
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to Google Cloud (WIF)
        id: wif
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Export ADC file for gcloud
        run: |
          echo "CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=${{ steps.wif.outputs.credentials_file_path }}" >> $GITHUB_ENV
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ steps.wif.outputs.credentials_file_path }}" >> $GITHUB_ENV

      - name: Set gcloud project
        run: |
          gcloud config set project $PROJECT_ID

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      - name: Create Artifact Registry repo if missing (idempotent)
        run: |
          gcloud artifacts repositories describe $ARTIFACT_REPO --location=$REGION --project=$PROJECT_ID || \
          gcloud artifacts repositories create $ARTIFACT_REPO --repository-format=docker --location=$REGION --project=$PROJECT_ID --description="Docker images for mannequin-segmenter service"

      - name: Compute image tag (from mannequin-segmenter repo)
        id: vars
        run: |
          TAG=${{ inputs.image_tag }}
          if [ -z "$TAG" ]; then cd mannequin-segmenter && TAG=$(git rev-parse --short HEAD) && cd - >/dev/null; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Check if image already exists (docker manifest)
        id: check_image
        run: |
          IMAGE_URI="$REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REPO/$IMAGE_NAME:${{ steps.vars.outputs.tag }}"
          # docker is already configured to auth to Artifact Registry
          if docker manifest inspect "$IMAGE_URI" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Build and push image
        if: steps.check_image.outputs.exists != 'true'
        run: |
          echo "Building $IMAGE_URI"
          cd mannequin-segmenter
          docker build -t "$IMAGE_URI" -f Dockerfile .
          docker push "$IMAGE_URI"

      - name: Deploy VM with startup script
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
          GITHUB_ACTIONS: true
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          export IMAGE_URI
          export GITHUB_ACTIONS
          export GCP_SA_KEY
          cd ${{ github.workspace }}
          ./deploy-gcp.sh | cat


