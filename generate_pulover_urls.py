#!/usr/bin/env python3
"""
Pulover URL generator script
Kiv√°laszt random pulover k√©peket a CSV-b≈ël amelyek 'b.jpg'-re v√©gz≈ëdnek
"""

import csv
import random
import sys

def extract_pulover_urls(csv_file, count=50):
    """Kiv√°laszt random pulover URL-eket a CSV-b≈ël"""
    pulover_urls = []
    
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            
            for line_num, line in enumerate(lines[1:], 2):  # Skip header
                line = line.strip()
                if not line:
                    continue
                    
                # Split by comma and clean up
                parts = line.split(',')
                if len(parts) >= 3:
                    full_name = parts[1].lower()
                    image_url = parts[2]
                    
                    # Ellen≈ërizz√ºk hogy pulover van a nev√©ben vagy a kateg√≥ri√°ban √©s b.jpg v√©gz≈ëd√©s≈±
                    if ('pulover' in full_name or '–ø—É–ª–æ–≤–µ—Ä–∏' in full_name) and image_url.endswith('b.jpg'):
                        pulover_urls.append(image_url)
        
        print(f"üîç √ñsszesen tal√°lt pulover k√©pek (b.jpg): {len(pulover_urls)}")
        
        # Random kiv√°laszt√°s
        if len(pulover_urls) < count:
            print(f"‚ö†Ô∏è  Csak {len(pulover_urls)} k√©p el√©rhet≈ë, az √∂sszeset haszn√°ljuk")
            selected_urls = pulover_urls
        else:
            selected_urls = random.sample(pulover_urls, count)
        
        print(f"‚úÖ Kiv√°lasztott k√©pek sz√°ma: {len(selected_urls)}")
        return selected_urls
        
    except Exception as e:
        print(f"‚ùå Hiba a CSV olvas√°sakor: {e}")
        return []

def update_dynamic_load_balancer(urls):
    """Friss√≠ti a dynamic_load_balancer_test.py f√°jlt az √∫j URL-ekkel"""
    
    # Gener√°ljuk a Python lista string-et
    url_list_str = '[\n    "' + '",\n    "'.join(urls) + '"\n]'
    
    script_content = f'''#!/usr/bin/env python3
"""
Dynamic Load Balancer Test Script for Mannequin Segmenter API
Each instance gets exactly one task at a time. When an instance finishes, 
it immediately gets assigned the next pending task from the queue.
Updated with random pulover URLs from CSV data.
"""

import asyncio
import aiohttp
import time
import statistics
from datetime import datetime
import json
from collections import deque
import random

# ========== KONFIGUR√ÅCI√ìS PARAM√âTEREK ==========
TEST_DURATION_SECONDS = 30  # Teszt fut√°si ideje m√°sodpercben
TOTAL_REQUESTS = {len(urls)}         # √ñsszes k√©r√©sek sz√°ma amit fel akarunk dolgozni
REQUEST_TIMEOUT = 60        # Timeout m√°sodpercben

# VM Instance IP c√≠mek
VM_INSTANCES = [
    "http://35.233.66.133:5001",
    "http://34.34.136.96:5001", 
    "http://192.158.29.6:5001",
    "http://35.187.98.56:5001"
]

# Pulover k√©pek URL list√°ja (random kiv√°lasztva CSV-b≈ël)
PULOVER_URLS = {url_list_str}

# API endpoint
API_ENDPOINT = "/infer"

# ===============================================

class InstanceState:
    def __init__(self, url):
        self.url = url
        self.is_busy = False
        self.current_task_id = None
        self.completed_tasks = 0
        self.total_response_time = 0.0
        self.errors = 0
        self.last_completed = None

class DynamicLoadBalancer:
    def __init__(self):
        self.instances = [InstanceState(url) for url in VM_INSTANCES]
        self.task_queue = deque()
        self.completed_results = []
        self.errors = []
        self.start_time = None
        self.next_task_id = 1
        
        # Felt√∂ltj√ºk a task queue-t random pulover k√©pekkel
        for i in range(TOTAL_REQUESTS):
            random_url = random.choice(PULOVER_URLS)
            self.task_queue.append({{
                "task_id": i + 1,
                "payload": {{
                    "image_url": random_url,
                    "prompt_mode": "both"
                }}
            }})
    
    def get_available_instance(self):
        """Visszaad egy szabad instance-t, ha van"""
        for instance in self.instances:
            if not instance.is_busy:
                return instance
        return None
    
    def get_next_task(self):
        """Kivesz egy task-ot a queue-b√≥l"""
        if self.task_queue:
            return self.task_queue.popleft()
        return None
    
    async def execute_task(self, session, instance, task):
        """V√©grehajtja a task-ot egy adott instance-on"""
        instance.is_busy = True
        instance.current_task_id = task["task_id"]
        
        full_url = f"{{instance.url}}{{API_ENDPOINT}}"
        request_start = time.time()
        
        print(f"üîÑ Task {{task['task_id']}}: {{instance.url}} -> K√ºld√©s...", end="", flush=True)
        
        try:
            async with session.post(
                full_url,
                json=task["payload"],
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as response:
                response_text = await response.text()
                request_end = time.time()
                response_time = request_end - request_start
                
                result = {{
                    "task_id": task["task_id"],
                    "instance_url": instance.url,
                    "status_code": response.status,
                    "response_time": response_time,
                    "timestamp": request_start,
                    "success": response.status == 200,
                    "response_size": len(response_text),
                    "image_url": task["payload"]["image_url"]
                }}
                
                if response.status == 200:
                    try:
                        json_response = json.loads(response_text)
                        result["has_visualization_url"] = "visualization_url" in json_response
                        if "timing" in json_response:
                            result["server_timing"] = json_response["timing"]
                    except json.JSONDecodeError:
                        result["has_visualization_url"] = False
                
                self.completed_results.append(result)
                
                # Instance statisztik√°k friss√≠t√©se
                instance.completed_tasks += 1
                instance.total_response_time += response_time
                instance.last_completed = time.time()
                
                print(f" ‚úÖ {{response.status}} ({{response_time:.2f}}s)")
                
        except asyncio.TimeoutError:
            request_end = time.time()
            response_time = request_end - request_start
            error = {{
                "task_id": task["task_id"],
                "instance_url": instance.url,
                "error": "Timeout",
                "response_time": response_time,
                "timestamp": request_start,
                "image_url": task["payload"]["image_url"]
            }}
            self.errors.append(error)
            instance.errors += 1
            print(f" ‚è∞ TIMEOUT ({{response_time:.2f}}s)")
            
        except Exception as e:
            request_end = time.time()
            response_time = request_end - request_start
            error = {{
                "task_id": task["task_id"],
                "instance_url": instance.url,
                "error": str(e),
                "response_time": response_time,
                "timestamp": request_start,
                "image_url": task["payload"]["image_url"]
            }}
            self.errors.append(error)
            instance.errors += 1
            print(f" ‚ùå ERROR: {{e}}")
        
        # Instance felszabad√≠t√°sa
        instance.is_busy = False
        instance.current_task_id = None
    
    async def instance_worker(self, session, instance):
        """Worker egy adott instance-hoz - folyamatosan dolgozik"""
        while True:
            # Ellen≈ërizz√ºk hogy van-e m√©g munka √©s nincs-e id≈ët√∫ll√©p√©s
            current_time = time.time()
            if (current_time - self.start_time >= TEST_DURATION_SECONDS and 
                len(self.task_queue) == 0):
                break
                
            if current_time - self.start_time >= TEST_DURATION_SECONDS:
                print(f"‚è∞ {{instance.url}}: Id≈ët√∫ll√©p√©s, le√°ll√≠t√°s")
                break
            
            # Pr√≥b√°lunk task-ot szerezni
            task = self.get_next_task()
            if task is None:
                # Nincs t√∂bb task, v√°runk egy kicsit
                await asyncio.sleep(0.1)
                continue
            
            # V√©grehajtjuk a task-ot
            await self.execute_task(session, instance, task)
    
    async def run_test(self):
        """F≈ë teszt futtat√°s"""
        print(f"üöÄ Dynamic Load Balancer Teszt - Pulover K√©pekkel")
        print(f"üìä Konfigur√°ci√≥:")
        print(f"   - Teszt id≈ëtartam: {{TEST_DURATION_SECONDS}} m√°sodperc")
        print(f"   - √ñsszes task: {{TOTAL_REQUESTS}}")
        print(f"   - VM instance-ok: {{len(VM_INSTANCES)}}")
        print(f"   - Request timeout: {{REQUEST_TIMEOUT}}s")
        print(f"   - Strat√©gia: Minden instance max 1 task egyszerre")
        print(f"   - K√©pek: Random pulover k√©pek a CSV-b≈ël")
        print()
        
        for i, instance in enumerate(self.instances):
            print(f"   VM {{i+1}}: {{instance.url}}")
        print()
        
        self.start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            # Minden instance-hoz egy worker task
            tasks = []
            for instance in self.instances:
                task = asyncio.create_task(self.instance_worker(session, instance))
                tasks.append(task)
            
            # Progress monitoring task
            monitor_task = asyncio.create_task(self.progress_monitor())
            tasks.append(monitor_task)
            
            # V√°rjuk meg az √∂sszes worker befejez√©s√©t
            await asyncio.gather(*tasks, return_exceptions=True)
        
        print(f"\\n‚è±Ô∏è  Teszt befejezve!")
        self.print_statistics()
    
    async def progress_monitor(self):
        """Folyamatosan monitorozza a progresst"""
        while True:
            await asyncio.sleep(3)  # 3 m√°sodpercenk√©nt
            
            current_time = time.time()
            elapsed = current_time - self.start_time
            
            if elapsed >= TEST_DURATION_SECONDS:
                break
            
            completed = len(self.completed_results)
            remaining = len(self.task_queue)
            busy_instances = sum(1 for inst in self.instances if inst.is_busy)
            successful = len([r for r in self.completed_results if r["success"]])
            
            print(f"üìä Progress: {{completed}} k√©sz ({{successful}} sikeres), {{remaining}} v√°rakozik, {{busy_instances}}/{{len(self.instances)}} instance dolgozik ({{elapsed:.0f}}s)")
    
    def print_statistics(self):
        """Statisztik√°k ki√≠r√°sa"""
        successful_requests = [r for r in self.completed_results if r["success"]]
        failed_requests = len(self.completed_results) - len(successful_requests)
        total_requests = len(self.completed_results) + len(self.errors)
        
        print(f"\\nüìà TESZT EREDM√âNYEK - PULOVER K√âPEK")
        print(f"=" * 60)
        print(f"‚è±Ô∏è  Teszt id≈ëtartam: {{TEST_DURATION_SECONDS}} m√°sodperc")
        print(f"üìä √ñsszes task: {{TOTAL_REQUESTS}}")
        print(f"‚úÖ Befejezett task-ok: {{total_requests}}")
        print(f"üîÑ Feldolgozatlan task-ok: {{len(self.task_queue)}}")
        print(f"‚úÖ Sikeres k√©r√©sek: {{len(successful_requests)}}")
        print(f"‚ùå Sikertelen k√©r√©sek: {{failed_requests + len(self.errors)}}")
        if total_requests > 0:
            print(f"üìà Sikeress√©g ar√°ny: {{len(successful_requests)/total_requests*100:.1f}}%")
        
        if successful_requests:
            response_times = [r["response_time"] for r in successful_requests]
            
            print(f"\\n‚è∞ V√ÅLASZID≈ê STATISZTIK√ÅK (sikeres k√©r√©sek)")
            print(f"   üîπ Minimum: {{min(response_times):.3f}} m√°sodperc")
            print(f"   üîπ Maximum: {{max(response_times):.3f}} m√°sodperc")
            print(f"   üîπ √Åtlag: {{statistics.mean(response_times):.3f}} m√°sodperc")
            print(f"   üîπ Medi√°n: {{statistics.median(response_times):.3f}} m√°sodperc")
            
            # Instance-onk√©nti teljes√≠tm√©ny
            print(f"\\nüñ•Ô∏è  INSTANCE-ONK√âNTI TELJES√çTM√âNY")
            for i, instance in enumerate(self.instances):
                print(f"   VM {{i+1}} ({{instance.url}}):")
                print(f"      - Befejezett task-ok: {{instance.completed_tasks}}")
                print(f"      - Hib√°k: {{instance.errors}}")
                if instance.completed_tasks > 0:
                    avg_time = instance.total_response_time / instance.completed_tasks
                    print(f"      - √Åtlag v√°laszid≈ë: {{avg_time:.3f}}s")
                    
                    # Instance-specifikus task-ok
                    instance_results = [r for r in successful_requests if r["instance_url"] == instance.url]
                    if instance_results:
                        instance_times = [r["response_time"] for r in instance_results]
                        print(f"      - Min/Max: {{min(instance_times):.3f}}s / {{max(instance_times):.3f}}s")
                else:
                    print(f"      - √Åtlag v√°laszid≈ë: N/A")
            
            # Throughput sz√°m√≠t√°s
            if successful_requests:
                actual_test_duration = max([r["timestamp"] for r in successful_requests]) - min([r["timestamp"] for r in successful_requests])
                if actual_test_duration > 0:
                    throughput = len(successful_requests) / actual_test_duration
                    print(f"\\nüöÄ THROUGHPUT")
                    print(f"   üîπ Sikeres k√©r√©sek/m√°sodperc: {{throughput:.2f}}")
                    print(f"   üîπ √Åtlagos instance terhel√©s: {{throughput/len(self.instances):.2f}} k√©r√©s/sec/instance")
        
        # Queue √©s task-ok st√°tusza
        print(f"\\nüìã TASK QUEUE STATISZTIK√ÅK")
        print(f"   üîπ Eredeti task-ok: {{TOTAL_REQUESTS}}")
        print(f"   üîπ Befejezett: {{len(self.completed_results) + len(self.errors)}}")
        print(f"   üîπ Feldolgozatlan: {{len(self.task_queue)}}")
        
        # Sikeres k√©pek mint√°i
        if successful_requests:
            print(f"\\nüñºÔ∏è  SIKERES K√âPEK MINT√ÅI")
            sample_size = min(5, len(successful_requests))
            for i, result in enumerate(successful_requests[:sample_size]):
                print(f"   {{i+1}}. {{result['image_url']}} ({{result['response_time']:.2f}}s)")
        
        # Hib√°k r√©szletez√©se
        if self.errors:
            print(f"\\n‚ùå HIB√ÅK R√âSZLETEZ√âSE")
            error_types = {{}}
            for error in self.errors:
                error_type = error["error"]
                if error_type not in error_types:
                    error_types[error_type] = 0
                error_types[error_type] += 1
            
            for error_type, count in error_types.items():
                print(f"   üîπ {{error_type}}: {{count}} alkalom")

async def main():
    """F≈ë program bel√©p√©si pont"""
    balancer = DynamicLoadBalancer()
    await balancer.run_test()

if __name__ == "__main__":
    print("üîß Mannequin Segmenter Dynamic Load Balancer Test - Pulover Edition")
    print("=" * 70)
    asyncio.run(main())'''
    
    try:
        with open('dynamic_load_balancer_pulover.py', 'w', encoding='utf-8') as f:
            f.write(script_content)
        print(f"‚úÖ L√©trehozva: dynamic_load_balancer_pulover.py")
        print(f"üìä {len(urls)} random pulover URL be√©p√≠tve")
        return True
    except Exception as e:
        print(f"‚ùå Hiba a f√°jl √≠r√°sakor: {e}")
        return False

def main():
    if len(sys.argv) > 1:
        try:
            count = int(sys.argv[1])
        except ValueError:
            print("‚ùå Hib√°s sz√°m form√°tum")
            return
    else:
        count = 50  # Default
    
    print(f"üéØ {count} random pulover URL kiv√°laszt√°sa...")
    
    urls = extract_pulover_urls('data_for_categorisation.csv', count)
    
    if urls:
        print("\\nüìã Kiv√°lasztott URL-ek:")
        for i, url in enumerate(urls[:10], 1):  # Els≈ë 10 megjelen√≠t√©se
            print(f"   {i}. {url}")
        if len(urls) > 10:
            print(f"   ... √©s m√©g {len(urls) - 10} darab")
        
        print("\\nüîÑ Load balancer script gener√°l√°sa...")
        if update_dynamic_load_balancer(urls):
            print("\\nüöÄ Futtat√°shoz haszn√°ld: python3 dynamic_load_balancer_pulover.py")
    else:
        print("‚ùå Nem siker√ºlt URL-eket tal√°lni")

if __name__ == "__main__":
    main()
