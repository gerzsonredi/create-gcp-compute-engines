name: Deploy Garment Measuring API to GCP Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: garment-measuring-api
  REGION: europe-west4
  GAR_LOCATION: europe-west4-docker.pkg.dev
  REPOSITORY: garment-measuring-repo

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Authenticate to Google Cloud (Service Account Key)
      uses: google-github-actions/auth@v1
      with:
        create_credentials_file: true
        export_environment_variables: true
        cleanup_credentials: true
        access_token_lifetime: 3600s
        access_token_scopes: https://www.googleapis.com/auth/cloud-platform
        retries: 3
        backoff: 250
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Check Authentication and AWS Setup
      run: |
        echo "✅ Checking GitHub secrets configuration..."
        if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then echo "❌ ERROR: GCP_PROJECT_ID secret is not set!"; exit 1; fi
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then echo "❌ ERROR: GCP_SA_KEY secret is not set!"; exit 1; fi
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then echo "❌ ERROR: AWS_ACCESS_KEY_ID secret is not set!"; exit 1; fi
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then echo "❌ ERROR: AWS_SECRET_ACCESS_KEY secret is not set!"; exit 1; fi
        if [ -z "${{ secrets.AWS_S3_BUCKET_NAME }}" ]; then echo "❌ ERROR: AWS_S3_BUCKET_NAME secret is not set!"; exit 1; fi
        if [ -z "${{ secrets.AWS_S3_REGION }}" ]; then echo "❌ ERROR: AWS_S3_REGION secret is not set!"; exit 1; fi
        echo "✅ All required secrets are configured"
        echo "🔑 GCP Project ID: ${{ secrets.GCP_PROJECT_ID }}"
        echo "🪣 AWS S3 Bucket: ${{ secrets.AWS_S3_BUCKET_NAME }}"
        echo "🌍 AWS S3 Region: ${{ secrets.AWS_S3_REGION }}"
        echo "🔐 GCP SA Key: [CONFIGURED - $(echo '${{ secrets.GCP_SA_KEY }}' | wc -c) characters]"

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}

    - name: Set up Docker Buildx for caching
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Ensure Artifact Registry repository exists
      run: |
        echo "🔍 Checking if Artifact Registry repository exists..."
        if gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.REGION }} >/dev/null 2>&1; then
          echo "✅ Repository already exists: ${{ env.REPOSITORY }}"
        else
          echo "📦 Creating Artifact Registry repository..."
          if gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for garment measuring API" \
            --project=${{ env.PROJECT_ID }} 2>/dev/null; then
            echo "✅ Repository created successfully: ${{ env.REPOSITORY }}"
          else
            echo "📧 Service Account: hpe-78@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"
            echo "🎯 Required permission: artifactregistry.repositories.create"
            echo "📍 Resource: projects/${{ env.PROJECT_ID }}/locations/${{ env.REGION }}"
            echo ""
            echo "🔗 Manual fix: https://console.cloud.google.com/artifacts/repositories?project=${{ env.PROJECT_ID }}"
            echo "⚠️  Continuing with deployment - repository may already exist..."
            if ! gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.REGION }} >/dev/null 2>&1; then
              echo "❌ Repository does not exist and creation failed. Please create manually or check permissions."
              exit 1
            fi
          fi
        fi
        echo "🔍 Repository details:"
        gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.REGION }}

    - name: Build CPU-optimized Docker image with caching
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./dockerfile
        push: true
        tags: |
          ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Deploy to Cloud Run with CPU optimization and GitHub Secrets
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
      run: |
        echo "🚀 Deploying to Cloud Run with optimizations..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 8Gi \
          --cpu 8 \
          --timeout 900 \
          --cpu-boost \
          --concurrency=1 \
          --min-instances 1 \
          --max-instances 100 \
          --execution-environment gen2 \
          --set-env-vars="ENVIRONMENT=production,PYTHONPATH=/app,FORCE_CPU=true,CPU_COUNT=8,OMP_NUM_THREADS=6,MKL_NUM_THREADS=6,SKIP_MICROSERVICE_HEALTH=true,AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID},AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY},AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME},AWS_S3_REGION=${AWS_S3_REGION},MANNEQUIN_SEGMENTER_BASE_URL=${{ secrets.MANNEQUIN_SEGMENTER_URL }},CATEGORY_PREDICTOR_BASE_URL=${{ secrets.CATEGORY_PREDICTOR_URL }},MEASURING_HPE_BASE_URL=${{ secrets.MEASURING_HPE_URL }},ATTRIBUTE_PREDICTOR_BASE_URL=${{ secrets.ATTRIBUTE_PREDICTOR_URL }}" || {
            echo "❌ Deployment failed."; exit 1; }

    - name: Route traffic to latest revision
      run: |
        echo "🔄 Routing 100% traffic to latest revision..."
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --to-latest

    - name: Set public access
      run: |
        echo "🌐 Setting public access..."
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member="allUsers" \
          --role="roles/run.invoker" || echo "⚠️ Public access may be restricted by organization policy"

    - name: Get Cloud Run URL
      id: geturl
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🚀 Service deployed to: $SERVICE_URL"

    - name: Verify deployment with health check
      run: |
        echo "🧪 Verifying service is running..."
        echo "🔍 Testing health endpoint..."
        sleep 15
        MAX_RETRIES=5
        RETRY_COUNT=0
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f -s ${{ env.SERVICE_URL }}/health > /dev/null; then
            echo "✅ Health check successful!"; curl -s ${{ env.SERVICE_URL }}/health; break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1)); echo "⏳ Health check failed, retry $RETRY_COUNT/$MAX_RETRIES..."; sleep 10
          fi
        done
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "❌ Health check failed after $MAX_RETRIES attempts"; exit 1; fi

    - name: Deployment Summary
      run: |
        echo "## 🎉 Garment Measuring API Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY